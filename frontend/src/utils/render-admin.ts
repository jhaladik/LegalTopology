/**
 * Comprehensive admin view showing ALL synthesis data
 * This shows everything generated by the two-stage synthesis system
 */

export function renderAdminResults(result: any): void {
  const resultsContent = document.getElementById('resultsContent');
  if (!resultsContent) return;

  // Check if this is V2 response
  const isV2 = 'topological_analysis' in result;
  if (!isV2) {
    resultsContent.innerHTML = '<p>Legacy V1 response format - please use V2 endpoint</p>';
    return;
  }

  const html = `
    <!-- HEADER WITH METRICS -->
    <div class="admin-results-header">
      <h2>🔬 Admin View: Complete Synthesis Analysis</h2>
      <div class="admin-metrics">
        <span>⚡ ${result.topological_analysis.tensions.length} tensions</span>
        <span>📚 ${result.legal_research.statutes_found} statutes</span>
        <span>⚖️ ${result.legal_research.cases_found} cases</span>
        <span>🎯 ${result.legal_research.doctrine_clusters} clusters</span>
        <span>⏱️ ${(result.metadata.processing_time_ms / 1000).toFixed(1)}s</span>
        <span>🤖 ${result.metadata.model}</span>
      </div>
    </div>

    <!-- STAGE 1: TOPOLOGICAL ANALYSIS -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="topology">
        📊 Stage 1: Topological Analysis (Query Decomposer)
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="topology-content" class="section-content">

        <!-- Tensions Detail -->
        <div class="subsection">
          <h4>⚡ Legal Tensions (${result.topological_analysis.tensions.length})</h4>
          ${result.topological_analysis.tensions.map((t: any, i: number) => `
            <div class="tension-detail">
              <div class="tension-header">
                <strong>${i + 1}. ${t.tension_type}</strong>
                <span class="strength-badge">${(t.strength * 100).toFixed(0)}%</span>
              </div>
              <div class="tension-body">
                <p><strong>Competing Values:</strong> ${t.competing_values.join(' vs. ')}</p>
                <p><strong>Reasoning:</strong> ${t.reasoning || 'N/A'}</p>
              </div>
            </div>
          `).join('')}
        </div>

        <!-- Competing Doctrines -->
        <div class="subsection">
          <h4>📖 Competing Doctrines</h4>
          ${result.topological_analysis.competing_doctrines.map((d: any) => `
            <div class="doctrine-detail">
              <div class="doctrine-header">
                <strong>${d.doctrine}</strong>
                <span class="weight-badge">${(d.weight * 100).toFixed(0)}%</span>
              </div>
              <div class="doctrine-body">
                <p><strong>Resolves:</strong> ${d.resolves_tensions.join(', ')}</p>
                <p><strong>Creates:</strong> ${d.creates_problems.join(', ')}</p>
                <p><strong>Reasoning:</strong> ${d.reasoning}</p>
                <p><strong>Relevant Sections:</strong> ${d.relevant_sections.join(', ')}</p>
              </div>
            </div>
          `).join('')}
        </div>

        <!-- Absurdity Test -->
        <div class="subsection">
          <h4>🔬 Absurdity Test</h4>
          <div class="absurdity-test">
            <p><strong>Without ${result.topological_analysis.absurdity_test.confirms_doctrine}:</strong></p>
            <p class="absurdity-text">"${result.topological_analysis.absurdity_test.without_primary_doctrine}"</p>
          </div>
        </div>

        <!-- Temporal Factors -->
        ${result.topological_analysis.temporal_factors ? `
        <div class="subsection">
          <h4>⏰ Temporal Factors</h4>
          <p><strong>Duration:</strong> ${result.topological_analysis.temporal_factors.duration || 'N/A'}</p>
          <p><strong>Creates Expectation:</strong> ${result.topological_analysis.temporal_factors.creates_expectation ? 'Yes' : 'No'}</p>
          <p><strong>Years:</strong> ${result.topological_analysis.temporal_factors.years || 'N/A'}</p>
        </div>
        ` : ''}
      </div>
    </div>

    <!-- STAGE 2: VECTOR SEARCH STRATEGY -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="search">
        🔍 Stage 2: Vector Search Strategy
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="search-content" class="section-content">

        <!-- Search Provenance -->
        <div class="subsection">
          <h4>📡 Search Provenance</h4>
          <pre class="json-display">${JSON.stringify(result.search_strategy.search_provenance, null, 2)}</pre>
        </div>

        <!-- Search Metrics -->
        <div class="subsection">
          <h4>📊 Search Results</h4>
          <ul>
            <li>Vector strategies created: ${result.search_strategy.vector_strategies}</li>
            <li>Used tensions: ${result.search_strategy.used_tensions}</li>
            <li>Statutes found: ${result.legal_research.statutes_found}</li>
            <li>Cases found: ${result.legal_research.cases_found}</li>
            <li>Doctrine clusters: ${result.legal_research.doctrine_clusters}</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- STAGE 3: RETRIEVED STATUTES -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="statutes">
        📜 Stage 3: Retrieved Statutes (${result.statutory_foundation.length})
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="statutes-content" class="section-content collapsed">
        ${result.statutory_foundation.map((s: any) => `
          <div class="statute-detail">
            <div class="statute-header">
              <strong>${s.section}</strong>
              <span class="relevance-badge">${(s.relevance * 100).toFixed(0)}%</span>
              <span class="source-badge">${s.source.join(', ')}</span>
            </div>
            <div class="statute-body">
              <p>${s.text}</p>
            </div>
          </div>
        `).join('')}
      </div>
    </div>

    <!-- STAGE 4: RETRIEVED CASES -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="cases">
        ⚖️ Stage 4: Retrieved Cases (${result.case_law.length})
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="cases-content" class="section-content collapsed">
        ${result.case_law.map((c: any) => `
          <div class="case-detail">
            <div class="case-header">
              <strong>${c.case_id}</strong> - ${c.court}
              <span class="weight-badge">Weight: ${c.weight.toFixed(2)}</span>
              <span class="relevance-badge">${(c.relevance * 100).toFixed(0)}%</span>
              <span class="source-badge">${c.source.join(', ')}</span>
            </div>
            <div class="case-body">
              <p class="case-text">${c.text}</p>
              ${c.cluster ? `<p class="cluster-info">Cluster: ${c.cluster}</p>` : ''}
              <button class="btn-review-decision" data-case-id="${c.case_id}">
                🔍 Review Full Decision
              </button>
            </div>
          </div>
        `).join('')}
      </div>
    </div>

    <!-- STAGE 5: DOCTRINE CLUSTERS -->
    ${result.doctrine_clusters && result.doctrine_clusters.length > 0 ? `
    <div class="admin-section">
      <h3 class="section-toggle" data-section="clusters">
        🎯 Stage 5: Doctrine Clusters (${result.doctrine_clusters.length})
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="clusters-content" class="section-content collapsed">
        ${result.doctrine_clusters.map((cluster: any) => `
          <div class="cluster-detail">
            <h4>${cluster.doctrine_id}</h4>
            <p>Members: ${cluster.member_count}</p>
            <p>Common sections: ${cluster.common_sections.join(', ')}</p>
            ${cluster.supreme_court_anchor ? `<p>Supreme Court: ${cluster.supreme_court_anchor}</p>` : ''}
            ${cluster.statute_anchor ? `<p>Statute anchor: ${cluster.statute_anchor}</p>` : ''}
          </div>
        `).join('')}
      </div>
    </div>
    ` : ''}

    <!-- STAGE 6: JUNIOR LAWYER RESOLUTIONS (if available) -->
    ${result.tension_resolutions ? `
    <div class="admin-section">
      <h3 class="section-toggle" data-section="junior">
        👨‍💼 Stage 6: Junior Lawyer Analysis (Per Tension)
        <span class="toggle-icon">▼</span>
      </h3>
      <div id="junior-content" class="section-content collapsed">
        ${result.tension_resolutions.map((r: any) => `
          <div class="resolution-detail">
            <h4>${r.tension}</h4>
            <div class="resolution-text">${r.resolution}</div>
          </div>
        `).join('')}
      </div>
    </div>
    ` : ''}

    <!-- STAGE 7: FINAL SYNTHESIS -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="synthesis">
        📝 Stage 7: Final Synthesis (Senior Lawyer)
        <span class="toggle-icon">▶</span>
      </h3>
      <div id="synthesis-content" class="section-content collapsed">
        <div class="synthesis-text">${formatAnalysis(result.analysis)}</div>
      </div>
    </div>

    <!-- DEBUG INFO -->
    <div class="admin-section">
      <h3 class="section-toggle" data-section="debug">
        🐛 Debug Information
        <span class="toggle-icon">▶</span>
      </h3>
      <div id="debug-content" class="section-content collapsed">
        <h4>Metadata</h4>
        <pre class="json-display">${JSON.stringify(result.metadata, null, 2)}</pre>

        <h4>Full Response</h4>
        <details>
          <summary>Click to expand full JSON response</summary>
          <pre class="json-display">${JSON.stringify(result, null, 2)}</pre>
        </details>
      </div>
    </div>
  `;

  resultsContent.innerHTML = html;

  // Add toggle functionality
  document.querySelectorAll('.section-toggle').forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      const section = (e.currentTarget as HTMLElement).dataset.section;
      const content = document.getElementById(`${section}-content`);
      const icon = (e.currentTarget as HTMLElement).querySelector('.toggle-icon');

      if (content) {
        content.classList.toggle('collapsed');
        if (icon) {
          icon.textContent = content.classList.contains('collapsed') ? '▶' : '▼';
        }
      }
    });
  });

  // Add review decision functionality
  document.querySelectorAll('.btn-review-decision').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const caseId = (e.currentTarget as HTMLElement).dataset.caseId;
      await reviewDecision(caseId || '');
    });
  });
}

// Helper function to format the analysis with proper markdown
function formatAnalysis(text: string): string {
  return text
    .replace(/## (.*?)$/gm, '<h3>$1</h3>')
    .replace(/### (.*?)$/gm, '<h4>$1</h4>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`(.*?)`/g, '<code>$1</code>')
    .replace(/\n/g, '<br>');
}

// Function to review a specific decision
async function reviewDecision(caseId: string) {
  try {
    const response = await fetch('https://legal-topology.jhaladik.workers.dev/api/review-decisions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ decision_ids: [caseId] })
    });

    const data = await response.json();

    if (data.decisions && data.decisions.length > 0) {
      const decision = data.decisions[0];
      showDecisionModal(decision);
    }
  } catch (error) {
    console.error('Failed to review decision:', error);
  }
}

// Show decision details in modal
function showDecisionModal(decision: any) {
  const modal = document.createElement('div');
  modal.className = 'decision-modal';
  modal.innerHTML = `
    <div class="modal-overlay"></div>
    <div class="modal-content">
      <h3>${decision.case_id}</h3>
      <p><strong>Court:</strong> ${decision.court}</p>
      <p><strong>Weight:</strong> ${decision.weight}</p>
      ${decision.pravni_veta ? `<p><strong>Legal Principle:</strong> ${decision.pravni_veta}</p>` : ''}
      <p><strong>Sections Referenced:</strong> ${decision.sections_referenced.join(', ')}</p>
      <p><strong>Text Length:</strong> ${decision.text_length} characters</p>
      <div class="decision-text">${decision.text}</div>
      <button class="btn-close">Close</button>
    </div>
  `;

  document.body.appendChild(modal);

  modal.querySelector('.btn-close')?.addEventListener('click', () => {
    modal.remove();
  });

  modal.querySelector('.modal-overlay')?.addEventListener('click', () => {
    modal.remove();
  });
}